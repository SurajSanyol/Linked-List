#include <iostream>
using namespace std;

class Node {
   public:
              int data;
              Node* next;
              Node* prev;


              Node(){
                this->data=0;
                this->next=NULL;
                this->prev=NULL;
           
              }


               Node(int data){
                this->data=data;
                this->next=NULL;
                this->prev=NULL;
           
              }
};

void printLinkedList(Node * head){
   
   Node *temp= head;
   while(temp!=NULL)
   {
     cout<<temp->data<<" ";
     temp = temp->next;

   }
}

void insrtAtHead(Node* &head, Node* & tail, int data)
{
    if (head==NULL){
       
      
       Node* newNode = new Node(data);
       head = newNode;
       tail=newNode;
       return;
    }

    Node * newNode = new Node(data);
    newNode->next = head;
    head->prev=newNode;
    head = newNode;
}

void insrtAtTail(Node* &head, Node* & tail, int data)
{
    if (head==NULL){
       
      
       Node* newNode = new Node(data);
       head = newNode;
       tail=newNode;
       return;
    }

    Node * newNode = new Node(data);
    tail->next=newNode;
    newNode->prev = tail;
    tail = newNode;
}

int getLength(Node *head){
    int len = 0;
    while(head!=NULL){
      head= head->next;
      len++;
    }
    return len;
}


void inerstAtPosition(Node* &head, Node* &tail, int position,int data){

   if(position<1){
    cout<<"please enter the Position greater than Zero : "<<endl;
    return;
   }

   if(head==NULL){
      Node * newNode = new Node(data);
      head = newNode;
      tail = newNode;
      return;
   }
    
    if(position==1){
      insrtAtHead(head, tail , data);
      return;
    }

    int len = getLength(head);
    if(position>len){
       insrtAtTail(head , tail, data);
       return;
    }
   // find the prevNode and currNode
   int i=1;
   Node *prevNode  = head;
   while(i<position-1){
    prevNode = prevNode->next;
    i++;
   }
   
   // create a currNode 
   Node *currNode = prevNode->next;

   // create an newNode 
   Node * newNode = new Node(data);

   prevNode->next = newNode;
   newNode->prev= prevNode;

   currNode->prev = newNode;
   newNode->next = currNode;


}

Node* reverseLinkedList(Node* & preve, Node*&currr){

   // base case 
    if(currr==NULL){
      return preve;
    }

    // 1 case solve
    Node*forward = currr->next;
    currr->next = preve;

     return reverseLinkedList(currr, forward);
}


int main() {
         
      Node* first = new Node(10);
      Node* second = new Node(20);
      Node* third = new Node(30);
      Node* fouth = new Node(40);
      Node* fifth  = new Node(50);
       
       Node* head = first;
       Node* tail = fifth;

       first->next = second;
       second->prev=first;

       second->next=third;
       third->prev=second;

       third->next=fouth;
       fouth->prev=third;

       fouth->next= fifth;
       fifth->prev=fouth;


       printLinkedList(first);
       cout<<endl;
       
       insrtAtHead(head ,tail , 5);

       printLinkedList(head);
       cout<<endl; 

       insrtAtTail(head ,tail , 51);
       printLinkedList(head);

       cout<<endl;

       inerstAtPosition(head, tail, 3,25);
       printLinkedList(head);
        cout<<endl;
    

        cout<<"this print the reverse the linked list :"<<endl;


        Node *preve = NULL;
        Node* currr = head;
        head = reverseLinkedList(preve,currr);
         printLinkedList(head);
     



  return 0;
}
