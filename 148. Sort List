/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
     
     ListNode*findMid(ListNode*&head){

        
          ListNode*slow = head;
          ListNode*fast = head->next;

          while(fast!=0){
            fast= fast->next;
               if(fast!=0){
                fast = fast->next;
                slow = slow->next;
               }
          }
          return slow;
     }

     ListNode*merge(ListNode*&left , ListNode*&right){

          if(left==0) return right;
          if(right==0) return left;
           
           ListNode*dummyNode = new ListNode(-1);
           ListNode*tail = dummyNode;

      while(left && right){

          if(left->val<=right->val){
                tail->next=left;
                tail= left;
                left= left->next;
          }
          else{
               tail->next=right;
               tail= right;
               right=right->next;
          }
        }


          if(left){
             tail->next = left;
          }

           if(right){
            tail->next = right;
           }

          return dummyNode->next;
     }

    ListNode* sortList(ListNode* head) {
         if(head == 0 || head->next==0) return head;

         // break LL into two half
         ListNode*mid = findMid(head);
         ListNode*left = head;
         ListNode*right = mid->next;
         mid->next=0;


         // recursive call
         left = sortList(left);
         right = sortList(right);

         // merge both List 
          ListNode*mergeList = merge(left,right);

          return  mergeList;


    }
};
