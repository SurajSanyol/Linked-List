#include <iostream>
using namespace std;
class Node{
  public:
   int data;
    Node* next;

    Node(int data){
      this->next=NULL;
      this->data=data;
    }
};

void printList(Node*head){
  Node *temp = head;
  while(temp!=NULL){
    cout<<temp->data<<" ";
    temp=temp->next;
  }
}

Node * findMiddleNode(Node* &head){

     if(head==NULL){
      cout<<"LL is empty : "<<endl;
      return head;

     }

     if(head->next==NULL){
       return head;
     }

     // for grater than 1 node 
      Node * slow=head;
     Node * fast = head;

     while(slow!=NULL && fast!=NULL){
           fast=fast->next;
           if(fast!=NULL){
            fast=fast->next;
            slow=slow->next;
           }
     }

     return slow;
}

int main() {
  cout << "Hello world!" << endl;

   Node* first = new Node(10);
   Node* second = new Node(20);
   Node* third = new Node(30);
   Node* fourth = new Node(40);
   Node* fifth = new Node(50);
   Node* six = new Node(60);


      first->next= second;
      second->next=third;
      third->next=fourth;
      fourth->next=fifth;
      fifth->next= six;

 
      printList(first);
      cout<<endl;

     // find the middle using two pointer approach
     cout<<"printing the middle Node: "<<findMiddleNode(first)->data<<endl;
     
         
  return 0;
}
